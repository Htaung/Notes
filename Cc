import javax.xml.namespace.QName;
import javax.xml.soap.*;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import java.util.Set;
import java.util.UUID;

public class UsernameTokenSOAPHandler implements SOAPHandler<SOAPMessageContext> {

    private final String username;
    private final String password;

    public UsernameTokenSOAPHandler(String username, String password) {
        this.username = username;
        this.password = password;
    }

    @Override
    public boolean handleMessage(SOAPMessageContext context) {
        Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
        if (outbound) {
            try {
                SOAPEnvelope envelope = context.getMessage().getSOAPPart().getEnvelope();
                SOAPHeader header = envelope.getHeader();
                if (header == null) header = envelope.addHeader();

                String wsseNS = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd";
                String wsuNS = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";

                Name securityName = envelope.createName("Security", "wsse", wsseNS);
                SOAPHeaderElement security = header.addHeaderElement(securityName);

                Name tokenName = envelope.createName("UsernameToken", "wsse", wsseNS);
                SOAPElement usernameToken = security.addChildElement(tokenName);
                usernameToken.addAttribute(new QName(wsuNS, "Id", "wsu"), "UsernameToken-" + UUID.randomUUID());

                usernameToken.addChildElement("Username", "wsse").addTextNode(username);
                usernameToken.addChildElement("Password", "wsse").addTextNode(password);

            } catch (Exception e) {
                throw new RuntimeException("Error adding WS-Security header", e);
            }
        }
        return true;
    }

    @Override public Set<QName> getHeaders() { return null; }
    @Override public boolean handleFault(SOAPMessageContext context) { return true; }
    @Override public void close(MessageContext context) {}
}
